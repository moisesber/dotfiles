# Dotfiles
alias dot='git --git-dir=$HOME/.dotfiles.git/ --work-tree=$HOME'
alias private-dot='git --git-dir=$HOME/.private.dotfiles.git/ --work-tree=$HOME'

# Common commands improvement
alias a="alias"
alias p="ps aux"
alias e=$EDITOR
alias k="pkill -f"
alias ip='ifconfig | grep "inet " | grep -v 127.0.0.1 | cut -d\  -f2'

# Open profile with editor
alias pf="$EDITOR \
~/.config/nvim/init.vim \
~/.tmux.conf \
~/.zshrc"

alias rpf="source ~/.zshrc"

# Hosts
alias hosts="sudo $EDITOR /etc/hosts"

# Important directories (aliases and working directories)
alias pj="cd $PROJECTS_HOME"

### Package managers

# Brew
alias b=brew
alias bc="brew cask"

# NodeJS / Yarn
export NODE_VERSION=9

# Use of eval was needed to expand $NODE_OPTIONS in multiple arguments for docker run
# See more: https://stackoverflow.com/questions/7454526/bash-variable-containing-multiple-args-with-quotes
alias nsh='eval docker run -it -v $PWD:/mnt/app:cached -w /mnt/app $NODE_OPTIONS node:$NODE_VERSION'

alias y='yarn'
alias yg='yarn global'

# Python / Pip
alias pip2deps='python2 -m pipdeptree | grep -v "\s -"'
alias pip3deps='python3 -m pipdeptree | grep -v "\s -"'

alias pip2upgrade='pip2 freeze | cut -d = -f 1 | xargs -n1 pip2 install -U'
alias pip3upgrade='pip3 freeze | cut -d = -f 1 | xargs -n1 pip3 install -U'

# Docker
alias d=docker
alias di='docker images'
alias dc="docker-compose"

# Update them all
function upgrade-package-managers {
  echo ">>> Brew / Brew Cask"
  brew update
  brew upgrade
  brew cask outdated | xargs -n1 brew cask reinstall

  echo ">>> Yarn (Global)"
  yarn global upgrade

  echo ">>> Composer (Global)"
  composer global update

  echo ">>> Pip 2"
  pip2 freeze | cut -d = -f 1 | xargs -n1 pip install -U 

  echo ">>> Pip 3"
  pip3 freeze | cut -d = -f 1 | xargs -n1 pip install -U 

  echo ">>> Nvim"
  nvr --remote-send ':PlugUpgrade | :PlugUpdate<CR> | q | :qa<CR>'
}

function drl {
    registry=$1
    image=$2
    curl -L http://${registry}/${image}/tags/list | jq
}

# Tmux
function tm {
    tmux attach

    if [ $? -ne 0 ]; then
      tmux
    fi
}

alias tmk="tmux kill-session"
alias tml="tmux list-sessions"

# FZF
alias f="fzf"
alias fp='fzf --preview "head -$LINES {}"'

function agvim  {
    CHOICE=$(ag --color $* | fzf -0 -1 --ansi)

    if [ -n "$CHOICE" ]
    then
        nvim $(echo "$CHOICE" | awk 'BEGIN { FS=":" } { printf "+%d %s\n", $2, $1 } ') 
    fi
}

# fswatch
alias fw="fswatch -r -o -t -x -l 2"

# SourceTree
alias s="stree ."

# Notifications (OSX)
function notify {
    osascript -e "display notification \"${1}\" with title \"$([[ ! -z ${2} ]] && echo ${1} || echo "ATTENTION")\""
}

# Watch dir and exec command
function watch-n-do {
    [ -z "$1" ] || [ -z "$2" ] && echo "Usage: watch-n-do <path> <command>" && return 1

    echo ">>> Waiting for changes"
    echo "Path: $1"
    echo "Command: $2"
    echo ""

    bash -c $2

    fw $1 | while read; do bash -c $2; done
}

# Watch files and reload browser with fswatch and osacript
function livereload {
    local pathToWatch=${1:-"$PWD"}
    local browser=${2:-"Google Chrome"}
    echo ">>> Watching changes on $pathToWatch (will reload first tab on $browser) \n"
    fswatch -o $pathToWatch | xargs -n1 -I {} osascript -e "tell application \"$browser\" to tell the active tab of its first window to reload"
}

